 API v2
=======

The trace data collection server will expose a simple REST API.
Base API end-point: http://milesense.com/api/v2/

Authentication of user credentials
**********************************
API End point - http://milesense.com/api/v2/auth/
The API end-point will accept data POSTed to it. It will expect the following mandatory parameters:
key - For security. The api key is calculated as md5(secret key + user name) where the secret key is "fswehw7et912ur2rf7#Y@^nfhfbqwme34f&HB&T24gvdkk" without the quotes
username: The username that was used to register on the website at http://milesense.com/accounts/create/
password: The password provided during registration
identifier: The unique identifier of the phone
platform: Integer value which represents the phone platform (iPhone - 1, Android - 11, Windows - 21)
api_version: Integer value which specifies the API version being used by the application.
timezone: Time zone ID. Example: America/Los_Angeles, America/New_York
location_services: Specifies which location services were already running when the application was started for the first time. CSV format. 0 for "disabled" 1 for "enabled"
<gps location setting>,<network location setting>,<airplane mode setting>,<background service data setting>,<WIFI enabled setting>
Example
0,1,0,1,1

Response
--------
Success response:
<?xml version="1.0" encoding="utf-8"?>
<response>
    <code>1</code>
    <userid>1</userid>
    <email>thejo@berkeley.edu</email>
    <first_name>Thejo</first_name>
    <last_name>Kote</last_name>
    <secret_key>secret key</secret_key>
</response>

Note:
- The first name and last name nodes may be empty.
- The secret_key value must be stored in persistent memory and used with all other API calls.

Error response:
<?xml version="1.0" encoding="utf-8"?>
<response>
    <code>0</code>
    <message>Password is incorrect</message>
</response>

The message will change based on the error.

Response when user is already logged in on a different phone:
<?xml version="1.0" encoding="utf-8"?>
<response>
    <code>2</code>
    <message>Your account is associated with a different phone. Would you like to associate it with this phone instead?</message>
</response>

Show the message to the user and provide a Yes / No option. If the selects yes, make another POST request which is the same as the original request in every way except for the addition of another parameter.
The parameter to be added is:
change_phone: The value should be 1.

Exit from the application if the user selects No.

Uploading data to the server
****************************
API End point - http://milesense.com/api/v2/data/
The API end-point will accept data POSTed to it as a compressed file (a multipart/form-data upload). The parameter which contains the gzipped data should be named:
data

The compressed (gzip) file should be a string which is the same as the body of a normal POST request. For example:
key1=val1&key2=val2&key3=val3

The mandatory parameters are:
secret_key - For security. The API key is calculated as md5(secret key + user name) where the secret key is the value returned as part of a response to a successful authentication request.
username - The username of the logged in user.
identifier - The unique identifier of the phone.

Non-mandatory parameters:
location_data - the location data in CSV format (one sample on each line)
sm_data - Android only. State machine data.
lifecycle_events - phone lifecycle event data
push_notification_token - The iPhone or Android push notification token.
sensor_data - a digest of the accelerometer, magnetometer, or any other sensors

Example for location_data, sm_data and lifecycle_events parameters are:
<sample 1>
<sample 2>

The expected order for the location data is -
lat, lon, gps_time, sample_time, velocity, haccuracy, altitude, course, service_provider, travel_mode, sample_period
All location data values are mandatory.
For units corresponding to each data point, refer to the DB schema (for example, sample_time is in seconds). Use 0 and 1 for boolean values.

The expected order for the state machine data for Android phones is -
sample_time, lat, lon, data in key value pairs separated by a semi colon (no commas)

The expected order for the lifecycle event data is -
event type, event timestamp (seconds),lat, lon, accuracy, last fix time (seconds), reason, data in key value pairs

Details about lifecycle event data:
event type - Can be one of "start", "stop", "running", or "exception" without quotes. The "running" event type can be a snapshot taken once every 30 minutes.
reason - valid values for "stop" events are "app_off", "location_services_off", "low_battery", "app_uninstall", "app_killed", "unknown"
valid values for "start" events are "app_on", "location_services_on", "normal_battery", "unknown"
valid values for "running" events are "running", "battery_plugged", "battery_unplugged", "stopped"
valid values for "exception" events are "exception"
data in key value pairs - Not mandatory. Any data here will be stuffed in a column for later analysis.

The expected format for the sensor_data field is a sequence of lines delimited by a newline character. Each line is a comma seperated list:
<type>, <timestamp>, <data>
<type> is a string describing the type of data. Currently only "T","A","M","O","Y" are used, however any single-character string is valid
<timestamp> is an integer that describes milliseconds from epoch time
<data> is a string that contains the data. This data will not need to be searchable by the database.
Example:
M,1310159164282,88;-25.87;-16.30;-38.31
T,1310159164279,false;[D@40cd9870;-1;

Response
--------
Once the API receives the data, it will respond with the status. You can add a GET parameter to the API end point specifying the format of the response (XML and JSON are supported). For example -
http://milesense.com/api/v2/data/?format=xml

Success response:
<?xml version="1.0" encoding="utf-8"?>
<response>
    <code>1</code>
    <message>Success</message>
    <sleep_time>60-360,1260-1380</sleep_time>
    <hot_spots>37.2235,127.2367;37.3465,127.4567</hot_spots>
</response>

Error response:
<?xml version="1.0" encoding="utf-8"?>
<response>
    <code>0</code>
    <message>Key is invalid (or other appropriate error message)</message>
</response>

Valid values of the code field are
0, 1, 2, 3
Code 1 indicates success. The client can now discard the data that has already uploaded.
Code 0 indicates an error. The error is of a type not expected, suggesting a software bug. The client should discard the data contained in this upload.
Code 2 indicates a change with the user account that requires the client to log out. The client should forget its login credentials and discard all saved data.
Code 3 indicates an error. This error is of an understood type, and the client should keep its data so that it can attempt to upload later.


Response when the phone is no longer associated with the user account:

If the user has logged into their account from a different phone and associated the new phone with the account, we don't want the old phone to continue uploading data to the server. The first time the old phone tries to upload location data to the server, it will receive this response:
<response>
	<code>2</code>
	<message>This phone is no longer associated with the username <username></message>
</response>

If error code 2 is received, stop all expensive operations (location and other sensors, network calls etc.) and let the OS kill the process when it wants to.

Uploading an image to the server
********************************
API End point - http://milesense.com/api/v2/image/
This API end-point will accept an image POSTed to it (a multipart/form-data upload). The parameter which contains the image data should be named:
image

The mandatory parameters are:
secret_key - For security. The API key is calculated as md5(secret key + user name) where the secret key is the value returned as part of a response to a successful authentication request.
username - The username of the logged in user.
type - The type of image being uploaded. Only one value is accepted for now - odometer
extension - Specifies the format of the image to be used when it is saved to a persistent store. Only "jpg" or "png" are valid values for now.
image - The image data

Success response:
<?xml version="1.0" encoding="utf-8"?>
<response>
    <code>1</code>
    <message>Success</message>
</response>

Error response:
<?xml version="1.0" encoding="utf-8"?>
<response>
    <code>0</code>
    <message>Key is invalid (or other appropriate error message)</message>
</response>